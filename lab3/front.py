# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'splines.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QApplication, QMainWindow, QGridLayout, QWidget, QTableWidget, QTableWidgetItem
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FCanvas
from matplotlib.figure import Figure

from NumericSolve import *


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1235, 776)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 131, 141))
        self.groupBox.setObjectName("groupBox")
        self.f2 = QtWidgets.QRadioButton(self.groupBox)
        self.f2.setGeometry(QtCore.QRect(10, 70, 111, 51))
        self.f2.setObjectName("f2")
        self.f1 = QtWidgets.QRadioButton(self.groupBox)
        self.f1.setGeometry(QtCore.QRect(10, 20, 101, 41))
        self.f1.setChecked(True)
        self.f1.setObjectName("f1")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(150, 10, 131, 71))
        self.groupBox_2.setObjectName("groupBox_2")
        self.osc1 = QtWidgets.QRadioButton(self.groupBox_2)
        self.osc1.setGeometry(QtCore.QRect(10, 20, 82, 17))
        self.osc1.setChecked(True)
        self.osc1.setObjectName("osc1")
        self.osc2 = QtWidgets.QRadioButton(self.groupBox_2)
        self.osc2.setGeometry(QtCore.QRect(10, 40, 101, 21))
        self.osc2.setObjectName("osc2")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(290, 10, 151, 141))
        self.groupBox_3.setObjectName("groupBox_3")
        self.gr1 = QtWidgets.QRadioButton(self.groupBox_3)
        self.gr1.setGeometry(QtCore.QRect(10, 20, 121, 17))
        self.gr1.setChecked(True)
        self.gr1.setObjectName("gr1")
        self.gr2 = QtWidgets.QRadioButton(self.groupBox_3)
        self.gr2.setGeometry(QtCore.QRect(10, 30, 131, 41))
        self.gr2.setObjectName("gr2")
        self.gr3 = QtWidgets.QRadioButton(self.groupBox_3)
        self.gr3.setGeometry(QtCore.QRect(10, 60, 131, 31))
        self.gr3.setObjectName("gr3")
        self.grComBox = QtWidgets.QComboBox(self.groupBox_3)
        self.grComBox.setGeometry(QtCore.QRect(10, 100, 121, 22))
        self.grComBox.setObjectName("grComBox")
        self.grComBox.addItem("")
        self.grComBox.addItem("")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(10, 150, 271, 111))
        self.groupBox_4.setObjectName("groupBox_4")
        self.GR_U_1 = QtWidgets.QRadioButton(self.groupBox_4)
        self.GR_U_1.setGeometry(QtCore.QRect(10, 70, 241, 31))
        self.GR_U_1.setChecked(True)
        self.GR_U_1.setObjectName("GR_U_1")
        self.label = QtWidgets.QLabel(self.groupBox_4)
        self.label.setGeometry(QtCore.QRect(10, 20, 71, 16))
        self.label.setObjectName("label")
        self.left = QtWidgets.QLineEdit(self.groupBox_4)
        self.left.setGeometry(QtCore.QRect(80, 20, 41, 20))
        self.left.setObjectName("left")
        self.label_2 = QtWidgets.QLabel(self.groupBox_4)
        self.label_2.setGeometry(QtCore.QRect(140, 20, 71, 16))
        self.label_2.setObjectName("label_2")
        self.right = QtWidgets.QLineEdit(self.groupBox_4)
        self.right.setGeometry(QtCore.QRect(210, 20, 41, 20))
        self.right.setObjectName("right")
        self.label_3 = QtWidgets.QLabel(self.groupBox_4)
        self.label_3.setGeometry(QtCore.QRect(10, 50, 121, 16))
        self.label_3.setObjectName("label_3")
        self.calc_coeff = QtWidgets.QPushButton(self.centralwidget)
        self.calc_coeff.setGeometry(QtCore.QRect(290, 160, 151, 51))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.calc_coeff.setFont(font)
        self.calc_coeff.setObjectName("calc_coeff")
        self.compare = QtWidgets.QPushButton(self.centralwidget)
        self.compare.setGeometry(QtCore.QRect(290, 210, 151, 51))
        self.compare.setObjectName("compare")
        self.table1 = QtWidgets.QTableWidget(self.centralwidget)
        self.table1.setGeometry(QtCore.QRect(10, 270, 431, 121))
        self.table1.setObjectName("table1")
        self.table1.setColumnCount(6)
        self.table1.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.table1.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table1.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table1.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table1.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table1.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table1.setHorizontalHeaderItem(5, item)
        self.table1.horizontalHeader().setCascadingSectionResizes(True)
        self.table1.horizontalHeader().setDefaultSectionSize(71)
        self.table1.horizontalHeader().setMinimumSectionSize(10)
        self.table1.horizontalHeader().setStretchLastSection(False)
        self.teable2 = QtWidgets.QTableWidget(self.centralwidget)
        self.teable2.setGeometry(QtCore.QRect(10, 400, 431, 161))
        self.teable2.setObjectName("teable2")
        self.teable2.setColumnCount(5)
        self.teable2.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.teable2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.teable2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.teable2.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.teable2.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.teable2.setHorizontalHeaderItem(4, item)
        self.teable2.horizontalHeader().setCascadingSectionResizes(True)
        self.teable2.horizontalHeader().setDefaultSectionSize(85)
        self.teable2.horizontalHeader().setMinimumSectionSize(10)
        self.teable2.horizontalHeader().setStretchLastSection(False)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(460, 10, 761, 551))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.groupBox_6 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_6.setGeometry(QtCore.QRect(20, 570, 1211, 191))
        self.groupBox_6.setObjectName("groupBox_6")
        self.label_4 = QtWidgets.QLabel(self.groupBox_6)
        self.label_4.setGeometry(QtCore.QRect(10, 30, 111, 16))
        self.label_4.setObjectName("label_4")
        self.spr_n = QtWidgets.QLineEdit(self.groupBox_6)
        self.spr_n.setGeometry(QtCore.QRect(120, 30, 41, 20))
        self.spr_n.setObjectName("spr_n")
        self.label_5 = QtWidgets.QLabel(self.groupBox_6)
        self.label_5.setGeometry(QtCore.QRect(180, 30, 161, 16))
        self.label_5.setObjectName("label_5")
        self.spr_N = QtWidgets.QLineEdit(self.groupBox_6)
        self.spr_N.setGeometry(QtCore.QRect(340, 30, 41, 20))
        self.spr_N.setText("")
        self.spr_N.setObjectName("spr_N")
        self.label_6 = QtWidgets.QLabel(self.groupBox_6)
        self.label_6.setGeometry(QtCore.QRect(10, 70, 401, 16))
        self.label_6.setObjectName("label_6")
        self.spr1_1 = QtWidgets.QLineEdit(self.groupBox_6)
        self.spr1_1.setGeometry(QtCore.QRect(410, 70, 161, 20))
        self.spr1_1.setText("")
        self.spr1_1.setObjectName("spr1_1")
        self.label_7 = QtWidgets.QLabel(self.groupBox_6)
        self.label_7.setGeometry(QtCore.QRect(590, 70, 201, 16))
        self.label_7.setObjectName("label_7")
        self.spr1_2 = QtWidgets.QLineEdit(self.groupBox_6)
        self.spr1_2.setGeometry(QtCore.QRect(790, 70, 131, 20))
        self.spr1_2.setText("")
        self.spr1_2.setObjectName("spr1_2")
        self.label_8 = QtWidgets.QLabel(self.groupBox_6)
        self.label_8.setGeometry(QtCore.QRect(620, 100, 191, 16))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.groupBox_6)
        self.label_9.setGeometry(QtCore.QRect(10, 100, 421, 16))
        self.label_9.setObjectName("label_9")
        self.spr2_2 = QtWidgets.QLineEdit(self.groupBox_6)
        self.spr2_2.setGeometry(QtCore.QRect(810, 100, 131, 20))
        self.spr2_2.setText("")
        self.spr2_2.setObjectName("spr2_2")
        self.spr2_1 = QtWidgets.QLineEdit(self.groupBox_6)
        self.spr2_1.setGeometry(QtCore.QRect(430, 100, 181, 20))
        self.spr2_1.setText("")
        self.spr2_1.setObjectName("spr2_1")
        self.label_10 = QtWidgets.QLabel(self.groupBox_6)
        self.label_10.setGeometry(QtCore.QRect(650, 130, 181, 16))
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.groupBox_6)
        self.label_11.setGeometry(QtCore.QRect(10, 130, 451, 16))
        self.label_11.setObjectName("label_11")
        self.spr3_2 = QtWidgets.QLineEdit(self.groupBox_6)
        self.spr3_2.setGeometry(QtCore.QRect(830, 130, 131, 20))
        self.spr3_2.setText("")
        self.spr3_2.setObjectName("spr3_2")
        self.spr3_1 = QtWidgets.QLineEdit(self.groupBox_6)
        self.spr3_1.setGeometry(QtCore.QRect(460, 130, 181, 20))
        self.spr3_1.setText("")
        self.spr3_1.setObjectName("spr3_1")
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setGeometry(QtCore.QRect(150, 90, 131, 61))
        self.groupBox_5.setObjectName("groupBox_5")
        self.sepamount = QtWidgets.QLineEdit(self.groupBox_5)
        self.sepamount.setGeometry(QtCore.QRect(10, 20, 111, 20))
        self.sepamount.setObjectName("sepamount")
        MainWindow.setCentralWidget(self.centralwidget)

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setObjectName("graphcontainer")
        self.figure = plt.figure()
        self.canvas = FCanvas(self.figure)
        self.horizontalLayout.addWidget(self.canvas)
        self.add_functions()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Сплайны вар 14"))
        self.groupBox.setTitle(_translate("MainWindow", "Функции"))
        self.f2.setText(_translate("MainWindow", "Главная\n"
                                                 "\n"
                                                 "f(x)=sqrt(1+x^4)"))
        self.f1.setText(_translate("MainWindow", "Тестовая\n"
                                                 "\n"
                                                 "ф(x)"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Осцилляции"))
        self.osc1.setText(_translate("MainWindow", "БЕЗ"))
        self.osc2.setText(_translate("MainWindow", "+cos(10x)"))
        self.groupBox_3.setTitle(_translate("MainWindow", "График"))
        self.gr1.setText(_translate("MainWindow", "F(x) vs S(x)"))
        self.gr2.setText(_translate("MainWindow", "F\'(x) vs S\'(x)"))
        self.gr3.setText(_translate("MainWindow", "F\"(x) vs S\"(x)"))
        self.grComBox.setItemText(0, _translate("MainWindow", "График"))
        self.grComBox.setItemText(1, _translate("MainWindow", "Погрешность"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Границы отрезка"))
        self.GR_U_1.setText(_translate("MainWindow", "ЕГУ S\"(a)=S\"(b)=0"))
        self.label.setText(_translate("MainWindow", "Левая (a) ="))
        self.left.setText(_translate("MainWindow", "-1"))
        self.label_2.setText(_translate("MainWindow", "Правая (b) ="))
        self.right.setText(_translate("MainWindow", "1"))
        self.label_3.setText(_translate("MainWindow", "Вторые производные:"))
        self.calc_coeff.setText(_translate("MainWindow", "Рассчитать\n"
                                                         "коэффициенты\n"
                                                         "сплайна"))
        self.compare.setText(_translate("MainWindow", "Сравнить\n"
                                                      "F(x) и S(x)"))
        item = self.table1.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "i"))
        item = self.table1.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "xᵢ"))
        item = self.table1.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "aᵢ"))
        item = self.table1.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "bᵢ"))
        item = self.table1.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "cᵢ"))
        item = self.table1.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "dᵢ"))
        item = self.teable2.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "i"))
        item = self.teable2.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "xᵢ"))
        item = self.teable2.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "|Fᵢ-Sᵢ|"))
        item = self.teable2.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "|Fᵢ\'-Sᵢ\'|"))
        item = self.teable2.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "|Fᵢ\"-Sᵢ\"|"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Справка"))
        self.label_4.setText(_translate("MainWindow", "Сетка сплайна (n)="))
        self.spr_n.setText(_translate("MainWindow", "1"))
        self.label_5.setText(_translate("MainWindow", "Контрольная сетка N ="))
        self.label_6.setText(_translate("MainWindow", "Погрешность сплайна на контрольной сетке max|Fᵢ-Sᵢ|, составила"))
        self.label_7.setText(_translate("MainWindow", "и была достигнута при x = "))
        self.label_8.setText(_translate("MainWindow", "и была достигнута при x = "))
        self.label_9.setText(
            _translate("MainWindow", "Погрешность производной на контрольной сетке max|Fᵢ-Sᵢ|, составила"))
        self.label_10.setText(_translate("MainWindow", "и была достигнута при x = "))
        self.label_11.setText(
            _translate("MainWindow", "Погрешность второй производной на контрольной сетке max|Fᵢ-Sᵢ|, составила"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Число разбиений"))
        self.sepamount.setText(_translate("MainWindow", "100"))

    def add_functions(self):
        self.calc_coeff.clicked.connect(lambda: self._calc_coeff())
        self.compare.clicked.connect(lambda: self._compare())

    def choose(self, arr):
        for i in range(len(arr)):
            if arr[i]:
                return i
        return 0

    def get_all_data(self):
        params = {'funcs': self.choose([self.f1.isChecked(), self.f2.isChecked()]),
                  'oscillations': self.choose([self.osc1.isChecked(), self.osc2.isChecked()]),
                  'graphs': self.choose([self.gr1.isChecked(), self.gr2.isChecked(), self.gr3.isChecked()]),
                  'graph_or_error': 0 if self.grComBox.currentText() == 'График' else 1,
                  'left': float(self.left.text()), 'right': float(self.right.text()),
                  'second_d': 0 if self.GR_U_1.isChecked() else 1,
                  'sep_amount': int(self.sepamount.text())}

        print(params)
        return params

    def _calc_coeff(self):
        data = self.get_all_data()
        n = data['sep_amount']
        a, b = data['left'], data['right']
        eps = 1e-8

        if data['funcs'] == 0:
            func = Phi()
        else:
            if data['oscillations'] == 0:
                func = Main_func()
            else:
                func = Main_Func2()
        self.spline = Spline(n, a, b, eps, func)
        self.spline.count_coeffs()

        # Extract and fill coefficient table
        coeffs_df = self.spline.df_coeffs
        coeffs_data = coeffs_df.values.tolist()
        self.fill_table(1, coeffs_data)

    def _compare(self):
        self.data = self.get_all_data()
        ticks = self.data['sep_amount'] * 4

        # Собираем таблицу ошибок
        errors_df = self.spline.collect_errors_table(ticks)
        self.fill_table(2, errors_df.values.tolist())

        # Заполняем списки максимальных ошибок по отрезкам,
        # чтобы потом в fill_info() можно было взять у них max()
        print(errors_df)
        self.spline.max_error_spline = np.array(errors_df['max|F(x)-S(x)|']).max()
        arr = np.array(errors_df['max|F(x)-S(x)|'])
        self.ind1 = np.where(arr == self.spline.max_error_spline)
        self.ind1 = self.ind1[0][0]
        self.x_1 = errors_df['x_i'].iloc[self.ind1]

        self.spline.max_error_derivative = np.array(errors_df["max|F'(x)-S'(x)|"]).max()
        arr = np.array(errors_df["max|F'(x)-S'(x)|"])
        self.ind2 = np.where(arr == self.spline.max_error_derivative)
        self.ind2 = self.ind2[0][0]
        self.x_2 = errors_df['x_i'].iloc[self.ind2]

        self.spline.max_error_derivative_2 = np.array(errors_df["max|F''(x)-S''(x)|"]).max()
        arr = np.array(errors_df["max|F''(x)-S''(x)|"])
        self.ind3 = np.where(arr == self.spline.max_error_derivative_2)
        self.ind3 = self.ind3[0][0]
        self.x_3 = errors_df['x_i'].iloc[self.ind3]

        # Теперь рисуем графики и выводим info
        self.drawgraph(ticks)
        self.fill_info(self.spline.n,
                       self.spline.max_error_spline,
                       self.spline.max_error_derivative,
                       self.spline.max_error_derivative_2)

    def drawgraph(self, ticks=50):
        self.figure.clear()
        ticks = self.data['sep_amount'] * 4
        if self.data['graph_or_error'] == 0:
            if self.data['graphs'] == 0:
                self.spline.plot_spline(ticks)
            elif self.data['graphs'] == 1:
                self.spline.plot_derivative(ticks)
            elif self.data['graphs'] == 2:
                self.spline.plot_derivative_2(ticks)
        else:
            if self.data['graphs'] == 0:
                self.spline.plot_error_spline(ticks)
            elif self.data['graphs'] == 1:
                self.spline.plot_error_derivative(ticks)
            elif self.data['graphs'] == 2:
                self.spline.plot_error_derivative_2(ticks)

        self.canvas.draw()

    def fill_table(self, tablenum, tabledata):
        table = self.table1 if tablenum == 1 else self.teable2
        while (table.rowCount() > 0):
            table.removeRow(0)

        for i in range(len(tabledata[0])):
            table.showColumn(i)

        table.setRowCount(len(tabledata))
        for i in range(len(tabledata)):
            for j in range(len(tabledata[i])):
                table.setItem(i, j, QTableWidgetItem(str(tabledata[i][j])))
        table.resizeColumnsToContents()

    def fill_info(self, n, derivative_0, derivative_1, derivative_2):
        self.spr_N.setText(str(4*n))
        self.spr_n.setText(str(n))
        self.spr1_1.setText(str(self.spline.max_error_spline))
        self.spr1_2.setText(str(self.x_1))
        self.spr2_1.setText(str(self.spline.max_error_derivative))
        self.spr2_2.setText(str(self.x_2))
        self.spr3_1.setText(str(self.spline.max_error_derivative_2))
        self.spr3_2.setText(str(self.x_3))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    sys.exit(app.exec_())
